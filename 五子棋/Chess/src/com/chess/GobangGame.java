package com.chess;
import java.io.BufferedReader;
import java.io.InputStreamReader;

 
public class GobangGame {
	// 定义达到赢条件的棋子数目
	private final int WIN_COUNT = 5;
	// 定义用户输入的X坐标
	private int posX = 0;
	// 定义用户输入的X坐标
	private int posY = 0;
	// 定义棋盘
	private Chessboard chessboard;

	/**
	 * 空构造器
	 */
	public GobangGame() {
	}

	/**
	 * 构造器，初始化棋盘和棋子属性
	 * 
	 * @param chessboard
	 *            棋盘类
	 */
	public GobangGame(Chessboard chessboard) {
		this.chessboard = chessboard;
	}

	/**
	 * 检查输入是否合法。
	 * 
	 * @param inputStr
	 *            由控制台输入的字符串。
	 * @return 字符串合法返回true,反则返回false。
	 */
	public boolean isValid(String inputStr) {
		// 将用户输入的字符串以逗号(,)作为分隔，分隔成两个字符串
		String[] posStrArr = inputStr.split(",");
		try {
			posX = Integer.parseInt(posStrArr[0]) - 1;
			posY = Integer.parseInt(posStrArr[1]) - 1;
		} catch (NumberFormatException e) {
			chessboard.printBoard();
			System.out.println("请以(数字,数字)的格式输入：");
			return false;
		}
		// 检查输入数值是否在范围之内
		if (posX < 0 || posX >= Chessboard.BOARD_SIZE || posY < 0
				|| posY >= Chessboard.BOARD_SIZE) {
			chessboard.printBoard();
			System.out.println("X与Y坐标只能大于等于1,与小于等于" + Chessboard.BOARD_SIZE
					+ ",请重新输入：");
			return false;
		}
		// 检查输入的位置是否已经有棋子
		String[][] board = chessboard.getBoard();
		if (board[posX][posY] != "十") {
			chessboard.printBoard();
			System.out.println("此位置已经有棋子，请重新输入：");
			return false;
		}
		return true;
	}

	/**
	 * 开始下棋
	 */
	public void start() throws Exception {
		// true为游戏结束
		boolean isOver = false;
		chessboard.initBoard();
		chessboard.printBoard();
		// 获取键盘的输入
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		String inputStr = null;
		// br.readLine:每当键盘输入一行内容按回车键，则输入的内容被br读取到
		while ((inputStr = br.readLine()) != null) {
			isOver = false;
			if (!isValid(inputStr)) {
				// 如果不合法，要求重新输入，再继续
				continue;
			}
			// 把对应的数组元素赋为"●"
			String chessman = Chessman.BLACK.getChessman();
			chessboard.setBoard(posX, posY, chessman);
			// 判断用户是否赢了
			if (isWon(posX, posY, chessman)) {
				isOver = true;

			} else {
				// 计算机选择位置坐标
				int[] computerPosArr = computerDo();
				chessman = Chessman.WHITE.getChessman();
				chessboard.setBoard(computerPosArr[0], computerPosArr[1],
						chessman);
				// 判断计算机是否赢了
				if (isWon(computerPosArr[0], computerPosArr[1], chessman)) {
					isOver = true;
				}
			}
			// 如果产生胜者，询问用户是否继续游戏
			if (isOver) {
				// 如果继续，重新初始化棋盘，继续游戏
				if (isReplay(chessman)) {
					chessboard.initBoard();
					chessboard.printBoard();
					continue;
				}
				// 如果不继续，退出程序
				break;
			}
			chessboard.printBoard();
			System.out.println("请输入您下棋的坐标，应以x,y的格式输入：");
		}
	}

	/**
	 * 是否重新开始下棋。
	 * 
	 * @param chessman
	 *            "●"为用户，"○"为计算机。
	 * @return 开始返回true，反则返回false。
	 */
	public boolean isReplay(String chessman) throws Exception {
		chessboard.printBoard();
		String message = chessman.equals(Chessman.BLACK.getChessman()) ? "恭喜您，您赢了，"
				: "很遗憾，您输了，";
		System.out.println(message + "再下一局？(y/n)");
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		if (br.readLine().equals("y")) {
			// 开始新一局
			return true;
		}
		return false;

	}

	/**
	 * 计算机按照威胁度下棋
	 */
	public int[] computerDo() {
		for(int i=0;i<Chessboard.BOARD_SIZE;i++){
			for(int j=0;j<Chessboard.BOARD_SIZE;j++){
				chessboard.getThreaten()[i][j]=0;
				}
			}
		int posX=0;
		int posY=0;
		initthreaten();
		int m=0;
		for(int i=0;i<Chessboard.BOARD_SIZE;i++){
			for(int j=0;j<Chessboard.BOARD_SIZE;j++){
				if(m<chessboard.getThreaten()[i][j]){
					m=chessboard.getThreaten()[i][j];
					posX=i;
					posY=j;
				}
			}
		}
//		int posX = (int) (Math.random() * (Chessboard.BOARD_SIZE - 1));
//		int posY = (int) (Math.random() * (Chessboard.BOARD_SIZE - 1));
//	    String[][] board = chessboard.getBoard();
//		while (board[posX][posY] != "十") {
//			posX = (int) (Math.random() * (Chessboard.BOARD_SIZE - 1));
//			posY = (int) (Math.random() * (Chessboard.BOARD_SIZE - 1));
//		}
		int[] result = { posX, posY };		
		return result;
	}
	/**
	 * 判断棋盘上的威胁度
	 * 
	 */
     public void initthreaten(){
    	 for(int i=0;i<Chessboard.BOARD_SIZE;i++){
    		 for(int j=0;j<Chessboard.BOARD_SIZE;j++){
    			 if(chessboard.getBoard()[i][j]!="十"){
    				 chessboard.getThreaten()[i][j]=0;
    				 continue;
    			 }
    			 else{
    				 chessboard.getThreaten()[i][j]=(int)Math.pow(ysize(i,j,Chessman.BLACK.getChessman()),2)+(int)Math.pow(xsize(i,j,Chessman.BLACK.getChessman()),2)+(int)Math.pow(yxsize(i,j,Chessman.BLACK.getChessman()),2)+(int)Math.pow(xysize(i,j,Chessman.BLACK.getChessman()),2);
    			 }
    		 }
    	 }
     }
	
	
	/**
	 * 判断输赢
	 * 
	 * @param posX
	 *            棋子的X坐标。
	 * @param posY
	 *            棋子的Y坐标
	 * @param ico
	 *            棋子类型
	 * @return 如果有五颗相邻棋子连成一条直接，返回真，否则相反。
	 */
	public boolean isWon(int posX, int posY, String ico) {
		
		if(ysize(posX,posY,ico)>=5||xsize(posX,posY,ico)>=5||xysize(posX,posY,ico)>=5||yxsize(posX,posY,ico)>=5){
			return true;
		}	
		return false;
	}
	public boolean isBundle(int x,int y){
		if(x<0||x>21||y<0||y>21){
			return true;
		}
		return false;
	}
    public int ysize(int x,int y,String ico){
    	int size=1;
    	if((!isBundle(x, y-1))&&chessboard.getBoard()[x][y-1].equals(ico)){
    		++size;
    		if((!isBundle(x, y-2))&&chessboard.getBoard()[x][y-2].equals(ico)){
    			++size;
    			if((!isBundle(x, y-3))&&chessboard.getBoard()[x][y-3].equals(ico)){
    				++size;
    				if((!isBundle(x, y-4))&&chessboard.getBoard()[x][y-4].equals(ico)){
    					++size;
    				}
    			}
    		}
    	}
    	if((!isBundle(x, y+1))&&chessboard.getBoard()[x][y+1].equals(ico)){
    		++size;
    		if((!isBundle(x, y+2))&&chessboard.getBoard()[x][y+2].equals(ico)){
    			++size;
    			if((!isBundle(x, y+3))&&chessboard.getBoard()[x][y+3].equals(ico)){
    				++size;
    				if((!isBundle(x, y+4))&&chessboard.getBoard()[x][y+4].equals(ico)){
    					++size;
    				}
    			}
    		}
    		
    	}
    	return size;
    }
    public int xsize(int x,int y,String ico){
    	int size=1;
    	if((!isBundle(x-1, y))&&chessboard.getBoard()[x-1][y].equals(ico)){
    		++size;
    		if((!isBundle(x-2, y))&&chessboard.getBoard()[x-2][y].equals(ico)){
    			++size;
    			if((!isBundle(x-3, y))&&chessboard.getBoard()[x-3][y].equals(ico)){
    				++size;
    				if(!isBundle(x-4, y)&&chessboard.getBoard()[x-4][y].equals(ico)){
    					++size;
    				}
    			}
    		}
    	}
    	if((!isBundle(x+1, y))&&chessboard.getBoard()[x+1][y].equals(ico)){
    		++size;
    		if((!isBundle(x+2, y))&&chessboard.getBoard()[x+2][y].equals(ico)){
    			++size;
    			if((!isBundle(x+3, y))&&chessboard.getBoard()[x+3][y].equals(ico)){
    				++size;
    				if((!isBundle(x+4, y))&&chessboard.getBoard()[x+4][y].equals(ico)){
    					++size;
    				}
    			}
    		}
    	}
        return size;
    	
    	
    }
    public int xysize(int x,int y,String ico){
    	int size=1;
    	if((!isBundle(x+1, y-1))&&chessboard.getBoard()[x+1][y-1].equals(ico)){
    		++size;
    		if((!isBundle(x+2, y-2))&&chessboard.getBoard()[x+2][y-2].equals(ico)){
    			++size;
    			if((!isBundle(x+3, y-3))&&chessboard.getBoard()[x+3][y-3].equals(ico)){
    				++size;
    				if((!isBundle(x+4, y-4))&&chessboard.getBoard()[x+3][y-4].equals(ico)){
    					++size;
    				}
    			}
    		}
    	}
    	if((!isBundle(x-1, y+1))&&chessboard.getBoard()[x-1][y+1].equals(ico)){
    		++size;
    		if((!isBundle(x-2, y+2))&&chessboard.getBoard()[x-2][y+2].equals(ico)){
    			++size;
    			if((!isBundle(x-3, y+3))&&chessboard.getBoard()[x-3][y+3].equals(ico)){
    				++size;
    				if((!isBundle(x-4, y+4))&&chessboard.getBoard()[x-4][y+4].equals(ico)){
    					++size;
    				}
    			}
    		}
    	}
    	return size;
    }
    public int yxsize(int x,int y,String ico){
    	int size=1;
    	if((!isBundle(x-1, y-1))&&chessboard.getBoard()[x-1][y-1].equals(ico)){
    		++size;
    		if((!isBundle(x-2, y-2))&&chessboard.getBoard()[x-2][y-2].equals(ico)){
    			++size;
    			if((!isBundle(x-3, y-3))&&chessboard.getBoard()[x-3][y-3].equals(ico)){
    				++size;
    				if((!isBundle(x-4, y-4))&&chessboard.getBoard()[x-4][y-4].equals(ico)){
    					++size;
    				}
    			}
    		}
    	}
    	if((!isBundle(x+1, y+1))&&chessboard.getBoard()[x+1][y+1].equals(ico)){
    		++size;
    		if((!isBundle(x+2, y+2))&&chessboard.getBoard()[x+2][y+2].equals(ico)){
    			++size;
    			if((!isBundle(x+3, y+3))&&chessboard.getBoard()[x+3][y+3].equals(ico)){
    				++size;
    				if((!isBundle(x+4, y+4))&&chessboard.getBoard()[x+4][y+4].equals(ico)){
    					++size;
    				}
    			}
    		}
    	}
    	return size;
    }
	public static void main(String[] args) throws Exception {

		GobangGame gb = new GobangGame(new Chessboard());
		gb.start();
	}
}
